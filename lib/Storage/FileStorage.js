// Generated by CoffeeScript 1.6.3
(function() {
  var Cache, FileStorage, Storage, fs,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  fs = require('fs');

  Storage = require('./Storage');

  Cache = require('../Cache');

  FileStorage = (function(_super) {
    __extends(FileStorage, _super);

    FileStorage.prototype.directory = null;

    FileStorage.prototype.data = null;

    FileStorage.prototype.meta = null;

    function FileStorage(directory) {
      this.directory = directory;
    }

    FileStorage.prototype.getFileName = function() {
      return this.directory + '/__' + this.cache.namespace + '.json';
    };

    FileStorage.prototype.getData = function() {
      var data, file;
      if (this.data === null) {
        file = this.getFileName();
        if (fs.existsSync(file)) {
          data = JSON.parse(fs.readFileSync(file, {
            encoding: 'utf-8'
          }));
          this.data = data.data;
          this.meta = data.meta;
        } else {
          this.data = {};
          this.meta = {};
        }
      }
      return this.data;
    };

    FileStorage.prototype.writeData = function(data, meta) {
      var file;
      this.data = data;
      this.meta = meta;
      file = this.getFileName();
      fs.writeFileSync(file, JSON.stringify({
        data: this.data,
        meta: this.meta
      }));
      return this;
    };

    FileStorage.prototype.getMeta = function() {
      if (this.meta === null) {
        this.getData();
      }
      return this.meta;
    };

    FileStorage.prototype.read = function(key) {
      var data;
      data = this.getData();
      if (typeof data[key] === 'undefined') {
        return null;
      } else {
        if (this.verify(this.findMeta(key))) {
          return data[key];
        } else {
          this.remove(key);
          return null;
        }
      }
    };

    FileStorage.prototype.write = function(key, data, dependencies) {
      var all, meta;
      if (dependencies == null) {
        dependencies = {};
      }
      all = this.getData();
      all[key] = data;
      meta = this.getMeta();
      meta[key] = dependencies;
      this.writeData(all, meta);
      return this;
    };

    FileStorage.prototype.remove = function(key) {
      var data, meta;
      data = this.getData();
      meta = this.getMeta();
      if (typeof data[key] !== 'undefined') {
        delete data[key];
        delete meta[key];
      }
      this.writeData(data, meta);
      return this;
    };

    FileStorage.prototype.clean = function(conditions) {
      var key, tag, type, typeFn, _i, _j, _k, _len, _len1, _len2, _ref, _ref1, _ref2;
      typeFn = Object.prototype.toString;
      type = typeFn.call(conditions);
      if (conditions === Cache.ALL) {
        this.writeData({}, {});
      } else if (type === '[object Object]') {
        if (typeof conditions[Cache.TAGS] !== 'undefined') {
          if (typeFn(conditions[Cache.TAGS]) === '[object String]') {
            conditions[Cache.TAGS] = [conditions[Cache.TAGS]];
          }
          _ref = conditions[Cache.TAGS];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            tag = _ref[_i];
            _ref1 = this.findKeysByTag(tag);
            for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
              key = _ref1[_j];
              this.remove(key);
            }
          }
        }
        if (typeof conditions[Cache.PRIORITY] !== 'undefined') {
          _ref2 = this.findKeysByPriority(conditions[Cache.PRIORITY]);
          for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
            key = _ref2[_k];
            this.remove(key);
          }
        }
      }
      return this;
    };

    return FileStorage;

  })(Storage);

  module.exports = FileStorage;

}).call(this);
