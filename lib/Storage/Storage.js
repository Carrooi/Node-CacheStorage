// Generated by CoffeeScript 1.6.3
(function() {
  var Cache, Storage, fs, isWindow, moment, path;

  isWindow = typeof window === 'undefined' ? false : true;

  if (!isWindow) {
    fs = require('fs');
    path = require('path');
  }

  moment = require('moment');

  Cache = require('../Cache');

  Storage = (function() {
    function Storage() {}

    Storage.prototype.cache = null;

    Storage.prototype.data = null;

    Storage.prototype.meta = null;

    Storage.prototype.read = function(key) {
      throw new Error('Cache storage: read method is not implemented.');
    };

    Storage.prototype.write = function(key, data, dependencies) {
      if (dependencies == null) {
        dependencies = {};
      }
      throw new Error('Cache storage: write method is not implemented.');
    };

    Storage.prototype.remove = function(key) {
      throw new Error('Cache storage: remove method is not implemented.');
    };

    Storage.prototype.clean = function(conditions) {
      throw new Error('Cache storage: clean method is not implemented');
    };

    Storage.prototype.getMeta = function() {
      throw new Error('Cache storage: getMeta method is not implemented');
    };

    Storage.prototype.invalidate = function() {
      this.data = null;
      return this.meta = null;
    };

    Storage.prototype.findMeta = function(key) {
      var meta;
      meta = this.getMeta();
      if (typeof meta[key] !== 'undefined') {
        return meta[key];
      } else {
        return null;
      }
    };

    Storage.prototype.findKeysByTag = function(tag) {
      var key, meta, metas, result;
      metas = this.getMeta();
      result = [];
      for (key in metas) {
        meta = metas[key];
        if (typeof meta[Cache.TAGS] !== 'undefined' && meta[Cache.TAGS].indexOf(tag) !== -1) {
          result.push(key);
        }
      }
      return result;
    };

    Storage.prototype.findKeysByPriority = function(priority) {
      var key, meta, metas, result;
      metas = this.getMeta();
      result = [];
      for (key in metas) {
        meta = metas[key];
        if (typeof meta[Cache.PRIORITY] !== 'undefined' && meta[Cache.PRIORITY] <= priority) {
          result.push(key);
        }
      }
      return result;
    };

    Storage.prototype.verify = function(meta) {
      var file, item, time, typefn, _i, _len, _ref, _ref1;
      typefn = Object.prototype.toString;
      if (typefn.call(meta) === '[object Object]') {
        if (typeof meta[Cache.FILES] !== 'undefined') {
          if (isWindow) {
            throw new Error('Files meta information is not supported in browser');
          }
          _ref = meta[Cache.FILES];
          for (file in _ref) {
            time = _ref[file];
            if ((new Date(fs.statSync(file).mtime)).getTime() !== time) {
              return false;
            }
          }
        }
        if (typeof meta[Cache.EXPIRE] !== 'undefined') {
          if (moment().valueOf() >= meta[Cache.EXPIRE]) {
            return false;
          }
        }
        if (typeof meta[Cache.ITEMS] !== 'undefined') {
          _ref1 = meta[Cache.ITEMS];
          for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
            item = _ref1[_i];
            item = this.findMeta(item);
            if ((item === null) || (item !== null && this.verify(item) === false)) {
              return false;
            }
          }
        }
      }
      return true;
    };

    Storage.prototype.parseDependencies = function(dependencies) {
      var file, files, i, item, result, time, typefn, _i, _j, _len, _len1, _ref, _ref1;
      typefn = Object.prototype.toString;
      result = {};
      if (typefn.call(dependencies) === '[object Object]') {
        if (typeof dependencies[Cache.FILES] !== 'undefined') {
          if (isWindow) {
            throw new Error('Files meta information is not supported in browser');
          }
          files = {};
          _ref = dependencies[Cache.FILES];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            file = _ref[_i];
            file = path.resolve(file);
            files[file] = (new Date(fs.statSync(file).mtime)).getTime();
          }
          result[Cache.FILES] = files;
        }
        if (typeof dependencies[Cache.EXPIRE] !== 'undefined') {
          switch (typefn.call(dependencies[Cache.EXPIRE])) {
            case '[object String]':
              time = moment(dependencies[Cache.EXPIRE], Cache.TIME_FORMAT);
              break;
            case '[object Object]':
              time = moment().add(dependencies[Cache.EXPIRE]);
              break;
            default:
              throw new Error('Expire format is not valid');
          }
          result[Cache.EXPIRE] = time.valueOf();
        }
        if (typeof dependencies[Cache.ITEMS] !== 'undefined') {
          result[Cache.ITEMS] = [];
          _ref1 = dependencies[Cache.ITEMS];
          for (i = _j = 0, _len1 = _ref1.length; _j < _len1; i = ++_j) {
            item = _ref1[i];
            result[Cache.ITEMS].push(this.cache.generateKey(item));
          }
        }
        if (typeof dependencies[Cache.PRIORITY] !== 'undefined') {
          result[Cache.PRIORITY] = dependencies[Cache.PRIORITY];
        }
        if (typeof dependencies[Cache.TAGS] !== 'undefined') {
          result[Cache.TAGS] = dependencies[Cache.TAGS];
        }
      }
      return result;
    };

    return Storage;

  })();

  module.exports = Storage;

}).call(this);
