// Generated by CoffeeScript 1.6.3
(function() {
  var Cache, Storage, fs, moment;

  fs = require('fs');

  moment = require('moment');

  Cache = require('../Cache');

  Storage = (function() {
    function Storage() {}

    Storage.prototype.cache = null;

    Storage.prototype.read = function(key) {
      throw new Error('Cache storage: read method is not implemented.');
    };

    Storage.prototype.write = function(key, data, dependencies) {
      if (dependencies == null) {
        dependencies = {};
      }
      throw new Error('Cache storage: write method is not implemented.');
    };

    Storage.prototype.remove = function(key) {
      throw new Error('Cache storage: remove method is not implemented.');
    };

    Storage.prototype.clean = function(conditions) {
      throw new Error('Cache storage: clean method is not implemented');
    };

    Storage.prototype.getMeta = function() {
      throw new Error('Cache storage: getMeta method is not implemented');
    };

    Storage.prototype.findMeta = function(key) {
      return this.getMeta()[key];
    };

    Storage.prototype.findKeysByTag = function(tag) {
      var key, meta, metas, result;
      metas = this.getMeta();
      result = [];
      for (key in metas) {
        meta = metas[key];
        if (typeof meta[Cache.TAGS] !== 'undefined' && meta[Cache.TAGS].indexOf(tag) !== -1) {
          result.push(key);
        }
      }
      return result;
    };

    Storage.prototype.verify = function(meta) {
      var file, time, typefn, _ref;
      typefn = Object.prototype.toString;
      if (typefn.call(meta) === '[object Object]') {
        if (typeof meta[Cache.FILES] !== 'undefined') {
          _ref = meta[Cache.FILES];
          for (file in _ref) {
            time = _ref[file];
            if ((new Date(fs.statSync(file).mtime)).getTime() !== time) {
              return false;
            }
          }
        }
        if (typeof meta[Cache.EXPIRE] !== 'undefined') {
          if (moment().valueOf() >= meta[Cache.EXPIRE]) {
            return false;
          }
        }
      }
      return true;
    };

    return Storage;

  })();

  module.exports = Storage;

}).call(this);
