// Generated by CoffeeScript 1.6.3
(function() {
  var BrowserLocalStorage, Cache, Storage,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Storage = require('./Storage');

  Cache = require('../Cache');

  BrowserLocalStorage = (function(_super) {
    __extends(BrowserLocalStorage, _super);

    BrowserLocalStorage.TEST_VALUE = '__--cache-storage--__';

    function BrowserLocalStorage() {
      if (!BrowserLocalStorage.isSupported()) {
        throw new Error('Cache storage: Local storage is not supported');
      }
    }

    BrowserLocalStorage.isSupported = function() {
      var e;
      try {
        localStorage.setItem(BrowserLocalStorage.TEST_VALUE, BrowserLocalStorage.TEST_VALUE);
        localStorage.getItem(BrowserLocalStorage.TEST_VALUE);
        return true;
      } catch (_error) {
        e = _error;
        return false;
      }
    };

    BrowserLocalStorage.prototype.getName = function() {
      return '__' + this.cache.namespace;
    };

    BrowserLocalStorage.prototype.getData = function() {
      var data;
      if (this.data === null) {
        data = localStorage.getItem(this.getName());
        if (data === null) {
          this.data = {};
          this.meta = {};
        } else {
          data = JSON.parse(data);
          this.data = data.data;
          this.meta = data.meta;
        }
      }
      return this.data;
    };

    BrowserLocalStorage.prototype.writeData = function(data, meta) {
      this.data = data;
      this.meta = meta;
      localStorage.setItem(this.getName(), JSON.stringify({
        data: this.data,
        meta: this.meta
      }));
      return this;
    };

    return BrowserLocalStorage;

  })(Storage);

  module.exports = BrowserLocalStorage;

}).call(this);
