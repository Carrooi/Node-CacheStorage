// Generated by CoffeeScript 1.6.3
(function() {
  var Cache, crypto;

  crypto = require('crypto-browserify');

  Cache = (function() {
    Cache.FILES = 'files';

    Cache.TAGS = 'tags';

    Cache.EXPIRE = 'expire';

    Cache.ITEMS = 'items';

    Cache.PRIORITY = 'priority';

    Cache.ALL = 'all';

    Cache.TIME_FORMAT = 'YYYY-MM-DD HH:mm';

    Cache.prototype.storage = null;

    Cache.prototype.namespace = null;

    function Cache(storage, namespace) {
      this.storage = storage;
      this.namespace = namespace;
      this.storage.cache = this;
    }

    Cache.prototype.generateKey = function(key) {
      return crypto.createHash('sha1').update(key).digest('hex');
    };

    Cache.prototype.load = function(key, fallback) {
      var data;
      if (fallback == null) {
        fallback = null;
      }
      data = this.storage.read(this.generateKey(key));
      if (data === null && fallback !== null) {
        return this.save(key, fallback);
      }
      return data;
    };

    Cache.prototype.save = function(key, data, dependencies) {
      if (dependencies == null) {
        dependencies = {};
      }
      key = this.generateKey(key);
      if (Object.prototype.toString.call(data) === '[object Function]') {
        data = data();
      }
      if (data === null) {
        this.storage.remove(key);
      } else {
        this.storage.write(key, data, this.storage.parseDependencies(dependencies));
      }
      return data;
    };

    Cache.prototype.remove = function(key) {
      return this.save(key, null);
    };

    Cache.prototype.clean = function(conditions) {
      this.storage.clean(conditions);
      return this;
    };

    return Cache;

  })();

  module.exports = Cache;

}).call(this);
