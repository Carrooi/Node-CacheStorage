path = require 'path'
fs = require 'fs'
Cache = require '../Cache'

class Storage


	cache: null


	read: (key) ->
		throw new Error 'Cache storage: read method is not implemented.'


	write: (key, data, dependencies = {}) ->
		throw new Error 'Cache storage: write method is not implemented.'


	remove: (key) ->
		throw new Error 'Cache storage: remove method is not implemented.'


	clean: (conditions) ->
		throw new Error 'Cache storage: clean method is not implemented'


	getMeta: ->
		return {}


	findMeta: (key) ->
		return @getMeta()[key]


	findKeysByTag: (tag) ->
		metas = @getMeta()
		result = []
		for key, meta of metas
			if typeof meta[Cache.TAGS] != 'undefined' && meta[Cache.TAGS].indexOf(tag) != -1
				result.push(key)
		return result


	parseDependencies: (dependencies = {}) ->
		if typeof dependencies == 'object' && typeof dependencies[Cache.FILES] != 'undefined'
			files = {}
			for file in dependencies[Cache.FILES]
				file = path.resolve(file)
				files[file] = (new Date(fs.statSync(file).mtime)).getTime()
			dependencies[Cache.FILES] = files
		return dependencies


	verify: (meta) ->
		if typeof meta == 'object' && typeof meta[Cache.FILES] != 'undefined'
			for file, time of meta[Cache.FILES]
				if (new Date(fs.statSync(file).mtime)).getTime() != time then return false
		return true


module.exports = Storage
